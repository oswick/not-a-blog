---
export interface Props {
  title: string;
}

const { title } = Astro.props;
---

<!DOCTYPE html>
<html lang="es">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content="Mi blog personal" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <title>{title}</title>

    <script is:inline>
      (function () {
        const getTheme = () => {
          if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
            return localStorage.getItem('theme');
          }
          if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
            return 'dark';
          }
          return 'light';
        };
        const theme = getTheme();
        document.documentElement.classList.toggle('dark', theme === 'dark');
        localStorage.setItem('theme', theme);
      })();
    </script>
  </head>

  <body>
    <header>
      <nav>
        <a href="/">~/home</a>
        <a href="/blog">~/blog</a>
        <a href="/music">~/music</a>
        <a href="/pics">~/pics</a>
        <a href="/about">~/about</a>
      </nav>
      <button id="themeToggle" aria-label="Cambiar tema" type="button">ðŸŒ“</button>
    </header>

    <main>
      <slot />
    </main>

    <footer>
      <p>made with â™¥ in 2025 | <a href="mailto:tu@email.com">contact</a></p>
    </footer>

    <script>
      function initThemeToggle() {
        const themeToggle = document.getElementById('themeToggle');
        if (!themeToggle) return;

        themeToggle.addEventListener('click', () => {
          const html = document.documentElement;
          const isDark = html.classList.contains('dark');
          html.classList.toggle('dark', !isDark);
          localStorage.setItem('theme', isDark ? 'light' : 'dark');
        });
      }

      if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', initThemeToggle);
      } else {
        initThemeToggle();
      }
    </script>
  </body>
</html>

<style>
  :root {
    --bg-color: #ffffff;
    --text-color: #000000;
    --hover-bg: rgba(0, 0, 0, 0.05);
    --border-color: #e0e0e0;
  }

  html.dark {
    --bg-color: #1a1a1a;
    --text-color: #ffffff;
    --hover-bg: rgba(255, 255, 255, 0.1);
    --border-color: #444;
  }

  html {
    font-family: monospace;
  }

  body {
    margin: 0;
    padding: 0;
    min-height: 100vh;
    display: flex;
    flex-direction: column;
    max-width: 800px;
    margin: 0 auto;
    background-color: var(--bg-color);
    color: var(--text-color);
  }

  header, footer {
    background-color: var(--bg-color);
    padding: 1rem;
    display: flex;
    justify-content: space-between;
    align-items: center;
    border-bottom: 1px solid var(--border-color);
  }

  footer {
    border-top: 1px solid var(--border-color);
    text-align: center;
    font-size: 0.9rem;
  }

  nav {
    display: flex;
    gap: 1rem;
  }

  nav a {
    color: var(--text-color);
    text-decoration: none;
    padding: 0.5rem 1rem;
    border-radius: 4px;
  }

  nav a:hover {
    background-color: var(--hover-bg);
  }

  #themeToggle {
    background: none;
    border: none;
    font-size: 1.2rem;
    cursor: pointer;
    color: var(--text-color);
    padding: 0.5rem;
    border-radius: 50%;
  }

  #themeToggle:hover {
    background: var(--hover-bg);
  }

  main {
    flex: 1;
    padding: 2rem;
  }

  footer a {
    color: var(--text-color);
    text-decoration: none;
    text-align: center;
  }

  footer a:hover {
    text-decoration: underline;
  }

  @media (max-width: 600px) {
    header {
      flex-direction: column;
      gap: 1rem;
    }

    nav {
      justify-content: center;
    }

    main {
      padding: 1rem;
    }
  }
</style>
